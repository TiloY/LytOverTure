<!DOCTYPE html>
<html lang="en">
    <head>
        <title>08 v-on来监听DOM事件 1. v-on: 任意事件类型=“执行函数”</title>
        <meta charset="UTF-8">
        <meta http-equiv="X-UA-Compatible" content="ie-edge">
        <meta name="viewport" content="width=device-width,initial-scale=1.0">
        <script src="vue.min.js"></script>
    </head>
    <body>
        <div id="app">
            <h1>{{name}}</h1>
            <button v-on:click="changMSG">点击改变</button>
            <!--简写形式 v-on:   改为@ -->
            <button @click="changMSG">简写</button>
            <!--传参数  通过执行函数-->>
            <button @click="changebyArg('ty')">传参</button>
            <!-- 4 通过执行函数 通过$event来传递事件对象 ，注意只能使用$event 并且不能加引号 -->
            <button @click="getEvent($event)">事件对象</button>
            <!-- 5 事件修饰符 可以给事件 添加特殊的功能 常用的有.prevent .stop -->
            <a href="http://www.baidu.com" @click.prevent="changMSG">事件修饰符 .prevent</a>
            <!-- 6 按键修饰符 -->
            <input v-on:keyup.13="submit">
            <!-- 7 按键修饰符 提供了别名 -->
            <input @keyup.enter="submit">
        </div>
        <script>
            var VM = new Vue({
                el:"#app",
                 data:{
                     name:'lyt'
                },
                //在methods中定义函数
                methods:{
                    changMSG(){
                        //注意在methods中想要去取data中的属性的话，需要加上this 因为this标识vue实例
                        this.name='sccc'
                    },
                    changebyArg(arg){
                        this.name=arg
                    },
                    getEvent(e){
                        console.log(e)
                    },
                    submit(){
                        console.log("submit")
                    }
                }
            })
        </script>
    </body>
</html>